## Hireplans Application Features

### Current Features:
1. User authentication and registration system
2. Job listings and job details pages
3. Candidate profile management (basic layout)
4. Employer management system
5. Job application system
6. Google Calendar integration
7. Email verification system
8. Reference system with feedback
9. Meeting scheduling functionality
10. Task management system
11. Admin dashboard with Orchid platform

### Feature Updates Log:
- Initial system setup with basic candidate, employer, and job management functionality
- Updated candidate profile page with modern 2-column layout (Jan 2024):
  * Left sidebar (1/3 width): Unified card containing profile, contact info, and basic details
  * Right content area (2/3 width): Experience, skills, languages, documents, notes sections
  * Modern card-based design with Bootstrap components and icons
  * Responsive design for mobile and desktop using Bootstrap grid system
  * Professional styling similar to LinkedIn profile layout
  * Clickable email (mailto) and phone (tel) links for better usability
  * Removed redundant Actions section (actions available in top command bar)
  * Moved profile header into sidebar for more integrated layout
  * Combined sidebar sections into one unified card for cleaner design
  * Converted from Tailwind CSS to Bootstrap classes with proper responsive layout
  * Replaced SVG icons with Bootstrap Icons for consistency
  * Converted entire page to Livewire component for better maintainability
  * Interactive skills and languages management using Livewire:
    - Add new skills/languages with compact, well-sized input field and button layout
    - Delete existing skills/languages with black X button on each badge (better visibility)
    - Real-time updates without page reload using Livewire
    - Duplicate prevention and validation
    - Enter key support for quick adding
    - Enhanced UI with proper button spacing (ms-1 gap), consistent sizing, and centered icons
    - Compact input groups with max-width constraint (350px) for better visual balance
    - Auto-focus on input fields for better UX
    - No JavaScript required - all handled by Livewire
  * Unified document display logic with edit page:
    - CV and other document links now use same data structure and rendering as edit screen
    - Consistent document handling across view and edit pages using HelperFunc::renderAttachmentsLinks
    - Proper clickable links with target="_blank" for document downloads
    - Unified attachment display with icons and proper formatting
  * Comprehensive Activity Logging System (Jan 2024):
    - Created activities database table with proper schema for timeline tracking
    - Built Activity model with type constants, relationships, and helper methods
    - Developed ActivityService for easy logging across the application
    - Added "Show Activity" button below left sidebar (full-width button with activity icon)
    - Toggle between normal profile view and activity timeline view
    - Dynamic button styling (outline when inactive, filled when active)
    - Real activity timeline display with:
      * Chronological order (most recent first)
      * Color-coded activity icons and badges
      * Rich activity descriptions with metadata
      * Clickable links to related jobs, applications, meetings
      * Activity types: profile created/updated, job applied, status changed, meetings, notes, documents
      * User attribution showing who performed each action
      * Timestamps for all activities
    - Add custom notes functionality:
      * "Add Note" button in activity view
      * Textarea input with validation and keyboard shortcuts (Ctrl+Enter)
      * Notes appear in timeline with chat icon and user attribution
    - Integrated activity logging into existing events:
      * Profile creation and updates
      * Document uploads (CV and other documents)
      * Job applications - logged when candidates apply for positions
      * Job application status changes - logged from job pipeline when recruiters update status
      * Meeting scheduling - logged when meetings are created from schedule page
      * Meeting updates - logged when meeting details are modified
      * Meeting status changes - logged when meetings are marked as completed or status changed
      * Automatic activity generation for all candidate interactions
    - Job Pipeline Integration:
      * Status changes in job pipeline automatically create activity logs
      * Activities include old status, new status, job details, and who made the change
      * Timeline shows complete application journey from application to final decision
    - Meeting Management Integration:
      * Meeting creation from schedule page automatically logs activity (both Livewire and Orchid ScheduleScreen)
      * Meeting updates and status changes create timeline entries (Orchid admin interface)
      * Activities include meeting details, job context, and scheduling information
      * Special handling for meeting completion with detailed metadata
      * Enhanced error handling and logging for troubleshooting activity creation
      * Improved candidate profile links in schedule page (no new window opening)
      * Clickable candidate names in schedule view link directly to candidate profiles
      * Activity logging integrated into Orchid ScheduleScreen for create/update/status change operations
      * Fixed meeting edit modal JavaScript compatibility issue in Orchid admin interface
      * Resolved "Illegal invocation" and "loadMeetingData is not defined" JavaScript errors  
      * Implemented proper Orchid modal pattern using async data loading and ModalToggle
      * Replaced custom JavaScript with Orchid's built-in async modal functionality  
      * Added asyncGetMeeting method for proper async modal data loading with ->async() method
      * Used ->asyncParameters() to pass meeting ID to async modal handler
      * Fixed "Cannot access offset of type string on string" error by returning proper array structure from asyncGetMeeting
      * Ensured meeting data is returned as individual field values matching form field expectations
      * Removed custom JavaScript in favor of Orchid's native modal system
      * Enhanced activity timeline with custom-styled action links using modern CSS
      * Replaced Bootstrap button classes with elegant custom `.activity-link` styles
      * Added hover effects, subtle animations, and color-coded job/application links
      * Improved visual hierarchy and user experience in candidate activity timeline
      * Replaced all native heading tags (h1-h6) with Bootstrap typography classes to prevent CSS conflicts
      * Used fw-bold fs-5 for section titles, fw-medium fs-6 for subsections, preventing global style overrides
      * Enhanced typography consistency across the entire candidate profile page
      * Added professional profile image section with circular avatar display
      * Integrated UI Avatars service for automatic fallback profile images
      * Added email verification badge overlay on profile image for visual verification status
      * Displays candidate name, job title, and company prominently under profile image
      * Added comprehensive Job Applications section displaying application history
      * Shows job title, company, application status with color-coded badges and icons
      * Displays application date, job location, and cover letter preview
      * Status-specific icons (send, eye, people, check-circle, x-circle) for visual clarity
      * Includes direct links to view full application details
      * Handles empty state with helpful messaging when no applications exist
      * Fixed status display by properly mapping JobApplicationStatus enum values to labels
      * Added enum casting to JobApplication model for proper status handling
      * Status badges now correctly show: Applied, Longlist, Shortlist, Screening, Interviewing, Hired, Rejected
      * Enhanced status logic with proper enum instance checking and fallback handling
      * Fixed cover letter display to show downloadable file link instead of raw text content
      * Cover letter now appears as clickable download button with file icon and original filename
      * Added proper error handling for missing cover letter files
      * **Email Marketing Outreach System (Jan 2025):**
        - Created comprehensive email marketing campaign management system
        - Built EmailCampaign model with status tracking (draft, sent, scheduled)
        - Implemented CampaignUser pivot model for tracking email delivery status (updated from CampaignCandidate)
                 - **Moved to Orchid Admin Platform (Jan 2025 Update):**
           - Integrated Outreach functionality into Orchid admin dashboard
           - Created OutreachScreen for campaign listing with sorting and filtering (clean table view)
           - Built OutreachEditScreen for creating/editing campaigns with form validation
           - Developed OutreachViewScreen for viewing campaign details and statistics
           - Added proper breadcrumb navigation and Orchid UI components
           - Implemented campaign management with draft/send functionality
           - Added Outreach menu item to Orchid admin navigation
           - Removed from regular website navigation for better admin integration
           - **Updated Architecture (Jan 2025):**
             - Separated concerns: listing, creation, editing, and viewing on separate screens
             - Clean table-based listing with actions dropdown
             - Dedicated create/edit form screen for better user experience
             - Proper navigation flow between screens
             - **User Relationship Update (Jan 2025):**
               - Changed from candidates to users (1:1 relationship)
               - Updated EmailCampaign model to use users() relationship instead of candidates()
               - Modified all screens to work with User model instead of Candidate model
               - Campaigns now target users directly for email marketing
               - Maintains same functionality but with proper user-based targeting
             - **User Association Fix (Jan 2025):**
               - Fixed critical issue where selected users were not being saved to campaigns
               - Updated OutreachEditScreen query() method to properly load existing users when editing
               - Added users()->sync() calls in both saveAsDraft() and sendCampaign() methods
               - Now properly saves and edits user associations for email marketing campaigns
               - Users are correctly stored in campaign_users pivot table with status tracking
             - **Email Sending Implementation (Jan 2025):**
               - Created CampaignMail mailable class following Laravel best practices (similar to ReferenceRequestMail)
               - Implemented SendCampaignJob for queued email processing with retry logic and error handling
               - Added email template with proper HTML content rendering
               - Integrated job dispatching into sendCampaign() method for scalable email delivery
               - Campaign users are initialized as 'pending' status before email sending
               - Individual job per user allows for granular tracking and error handling
               - Failed emails are logged and marked with error messages for debugging
               - Email status tracking: pending → sent/failed with timestamps and error details
               - Queue-based processing prevents timeouts for large recipient lists
             - **Activity Timeline Integration (Jan 2025):**
               - Added three new activity types: campaign_sent, campaign_delivered, campaign_failed
               - Campaign activities appear in candidate timelines with proper icons and colors:
                 * campaign_sent (bi-send, primary): When campaign is queued for candidate
                 * campaign_delivered (bi-send-check, success): When email successfully delivered
                 * campaign_failed (bi-send-x, danger): When email delivery fails
               - Activities include campaign metadata (ID, name, title) and error details for failures
               - Campaign activities are only logged for users who have candidate profiles
               - Complete audit trail of email marketing interactions in candidate timelines
               - Links to campaigns preserved in activity metadata for future reference
             - **Rich Text Editor Integration (Jan 2025):**
               - Replaced plain TextArea with Quill WYSIWYG editor for email content creation
               - Users can now format emails with rich text styling, bold, italic, lists, links, and more
               - Professional email composition interface similar to modern email clients
               - HTML output automatically generated from rich text formatting
               - Enhanced user experience for creating visually appealing marketing campaigns
               - Consistent with Orchid platform's rich text editing capabilities
             - **Variable Replacement System (Jan 2025):**
               - Added dynamic variable replacement in email campaigns for personalized messaging
               - Support for {{variable}} syntax in both email subject and content
               - Available variables include:
                 * Basic user data: {{name}}, {{first_name}}, {{email}}, {{phone}}, {{city}}, {{country}}, {{nationality}}
                 * Candidate-specific data (if profile exists): {{current_company}}, {{job_title}}, {{candidate_ref}}
               - Automatic replacement during email sending with user-specific data
               - Frontend helper showing all available variables with descriptions
               - Graceful handling of missing data with empty string fallbacks
               - Support for extracting first name from full name for more natural personalization
        - Used consistent styling patterns: Bootstrap classes with Tailwind utilities, proper form validation
        - Implemented responsive design with modal forms and table layouts
        - Added proper error handling and success messages for user feedback

### Project Development Guidelines:
- **Frontend Framework**: Use Livewire for interactive components instead of custom JavaScript
- **Styling**: Mix Bootstrap classes with Tailwind utilities for consistent design
- **Typography**: Use Bootstrap typography classes (fw-bold fs-5, fw-medium fs-6) instead of native h1-h6 tags
- **Page Titles**: Each page should have a clear title using fw-bold fs-2 class
- **Forms**: Use Bootstrap form classes with proper validation and error handling
- **Modals**: Implement modal forms for complex interactions (create/edit forms)
- **Tables**: Use Bootstrap table classes with responsive wrappers
- **Navigation**: Add new menu items to resources/views/livewire/layout/navigation.blade.php
- **Authentication**: Protect routes with auth middleware for user-specific features
- **Database**: Create proper migrations and models with relationships
- **Validation**: Implement form validation with user-friendly error messages
- **Responsive Design**: Ensure mobile-friendly layouts with proper spacing and sizing 